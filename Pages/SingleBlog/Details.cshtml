@page "/blog/{urlHandle}"
@model Blog.Web.Pages.SingleBlog.DetailsModel

@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> userManager
@inject SignInManager<IdentityUser> signInManager

@{
	ViewData["Title"] = Model.BlogPost.PageTitle;
}

<div class="container my-5">
	<div class="row justify-content-center">
		<div class="col-12 col-lg-6">
			@if (Model.BlogPost != null)
			{
				<h1 class="mb-3">@Model.BlogPost.Heading</h1>

				<div class="d-flex justify-content-between mb-3">
					<span class="text-secondary">Автор: @Model.BlogPost.Author</span>
					<span class="text-secondary">Дата: @Model.BlogPost.PublishDate.ToString("dd:MM:yyyy")</span>
				</div>

				<div class="mb-3">
					<span>
						@if (signInManager.IsSignedIn(User))
						{
							@if (Model.Liked)
							{
								<a style="cursor: pointer">
									<i class="bi change-color bi-heart-fill"></i>
								</a>
							}
							else
							{
								<a id="btnLike" style="cursor: pointer">
									<i class="bi bi-heart"></i>
								</a>
							}
						}

						<span id="totalLikes">
							@Model.TotalLikes
						</span>
						лайков
					</span>
				</div>

				<div class="mb-3">
					@if (Model.BlogPost.Tags != null)
					{
						foreach (var tag in Model.BlogPost.Tags)
						{
							<a href="/tags/@tag.Name">
								<span class="badge bg-dark">@tag.Name</span>
							</a>
						}
					}
				</div>


				<img src="@Model.BlogPost.FeaturedImageUrl" class="d-block img-fluid mb-3" />
				<div class="mb-3 blog-details">
					@Html.Raw(Model.BlogPost.Content)
				</div>

				<div class="card mt-5">
					<div class="card-header">
						<h5>Комментарии</h5>

						@if (signInManager.IsSignedIn(User))
						{
							<form method="post">
								<div class="mb-3">
									<input type="text" class="form-control" asp-for="CommentDescription" placeholder="Напишите комментарий...">
								</div>
								<div class="mb-3">
									<button type="submit" class="btn btn-dark">Добавить комментарий</button>
									<input type="hidden" asp-for="BlogPostId" />
								</div>
							</form>
						}


					</div>
					<div class="card-body">
						@if (Model.Comments != null && Model.Comments.Any())
						{
							@foreach (var comment in Model.Comments)
							{
								<div class="card mb-3">
									<div class="card-body">
										<div>
											@comment.Description
										</div>
										<div class="d-flex justify-content-between">
											<span class="text-secondary">@comment.UserName</span>
											<span class="text-secondary">@comment.DateAdded.ToShortTimeString()</span>
										</div>
										<div class="text-end">
											<span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
										</div>
									</div>
								</div>
							}
						}
						else
						{
							<p>Нет комментарий</p>
						}
					</div>
				</div>

			}
			else
			{
				<h2>Блог не найден</h2>
			}
		</div>
	</div>
</div>


@section Scripts {
	<script>
		const btnLike = document.getElementById('btnLike');
		const totalLikesElement = document.getElementById('totalLikes');

		async function getTotalLikes() {

			fetch('/api/blogpostlike/@Model.BlogPost.BlogPostId/totalLikes', {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json',
					'Accept': '*/*'
				},
			})
				.then(data => data.json())
				.then(result => totalLikesElement.innerHTML = result);
		}

		async function addLikeForBlog() {

			fetch('/api/blogpostlike/add', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Accept': '*/*'
				},
				body: JSON.stringify({
					blogPostId: '@Model.BlogPost.BlogPostId',
					userId: '@userManager.GetUserId(User)'
				})
			})
				.then(() => {
					btnLike.innerHTML = '<i class="bi change-color bi-heart-fill"></i>';
					btnLike.removeEventListener('click', addLikeForBlog);
					getTotalLikes();

				});
		}

		btnLike.addEventListener('click', addLikeForBlog);

	</script>
}